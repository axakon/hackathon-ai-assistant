# DTO Generation Guidelines

When creating Data Transfer Objects (DTOs) from models, follow these guidelines to ensure consistency and proper implementation:

1. Naming Convention:
   - Name the DTO class by appending "Dto" to the model name (e.g., ModelDto for Model).

2. Properties:
   - Include all properties from the model in the DTO.
   - Use the same property names and types as in the model.
   - For nullable properties, use the nullable type syntax (e.g., averageResponseTime?: number).

3. Nested Objects:
   - For nested objects like ModelStatus and ModelParameters, define them inline in the DTO class.

4. Constructor:
   - Implement a constructor that accepts a Partial<T> of the DTO class.
   - Use Object.assign(this, data) to populate the properties.

5. Serialization Methods:
   - Implement a toJson() method that returns a JSON string representation of the DTO.
   - Implement a static fromJson(json: string) method that creates a DTO instance from a JSON string.

6. Example Structure:
   ```typescript
   export class ModelDto {
     id: string;
     name: string;
     description: string;
     prompt: string;
     version: string;
     createdAt: Date;
     updatedAt: Date;
     author: string;
     tags: string[];
     status: {
       isActive: boolean;
       lastUpdated: Date;
     };
     parameters: {
       temperature: number;
       maxTokens: number;
       topP: number;
     };
     usageCount: number;
     averageResponseTime?: number;

     constructor(data: Partial<ModelDto>) {
       Object.assign(this, data);
     }

     toJson(): string {
       return JSON.stringify(this);
     }

     static fromJson(json: string): ModelDto {
       const data = JSON.parse(json);
       return new ModelDto(data);
     }
   }
   ```
